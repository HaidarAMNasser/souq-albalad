import 'package:debberly_app/global/data/remote/dio_helper.dart';
import 'package:flutter/material.dart';
import 'package:get/get.dart';

class ForgotPasswordController extends GetxController {
  // Form controllers
  final phoneController = TextEditingController();
  final otpController = TextEditingController();
  final newPasswordController = TextEditingController();
  final confirmPasswordController = TextEditingController();
  final formKey = GlobalKey<FormState>();
  final otpFormKey = GlobalKey<FormState>();
  final resetFormKey = GlobalKey<FormState>();

  // Observable states
  final isLoading = false.obs;
  final isOtpSent = false.obs;
  final isOtpVerified = false.obs;
  final isPasswordVisible = false.obs;
  final isConfirmPasswordVisible = false.obs;
  final resendTimer = 0.obs;
  final canResend = true.obs;

  @override
  void onClose() {
    // Dispose controllers to prevent memory leaks
    phoneController.dispose();
    otpController.dispose();
    newPasswordController.dispose();
    confirmPasswordController.dispose();
    super.onClose();
  }

  /// Toggle password visibility
  void togglePasswordVisibility() {
    isPasswordVisible.value = !isPasswordVisible.value;
  }

  /// Toggle confirm password visibility
  void toggleConfirmPasswordVisibility() {
    isConfirmPasswordVisible.value = !isConfirmPasswordVisible.value;
  }

  /// Validate phone number
  String? validatePhone(String? value) {
    if (value == null || value.trim().isEmpty) {
      return 'رقم الهاتف مطلوب';
    }
    if (value.length < 10) {
      return 'رقم الهاتف يجب أن يكون 10 أرقام على الأقل';
    }
    if (!RegExp(r'^[0-9+]+$').hasMatch(value)) {
      return 'رقم الهاتف يجب أن يحتوي على أرقام فقط';
    }
    return null;
  }

  /// Validate OTP code
  String? validateOtp(String? value) {
    if (value == null || value.trim().isEmpty) {
      return 'رمز التحقق مطلوب';
    }
    if (value.length != 6) {
      return 'رمز التحقق يجب أن يكون 6 أرقام';
    }
    if (!RegExp(r'^[0-9]+$').hasMatch(value)) {
      return 'رمز التحقق يجب أن يحتوي على أرقام فقط';
    }
    return null;
  }

  /// Validate new password
  String? validateNewPassword(String? value) {
    if (value == null || value.isEmpty) {
      return 'كلمة المرور الجديدة مطلوبة';
    }
    if (value.length < 8) {
      return 'كلمة المرور يجب أن تكون 8 أحرف على الأقل';
    }
    if (!RegExp(r'^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)').hasMatch(value)) {
      return 'كلمة المرور يجب أن تحتوي على حرف كبير وصغير ورقم';
    }
    return null;
  }

  /// Validate confirm password
  String? validateConfirmPassword(String? value) {
    if (value == null || value.isEmpty) {
      return 'تأكيد كلمة المرور مطلوب';
    }
    if (value != newPasswordController.text) {
      return 'كلمة المرور غير متطابقة';
    }
    return null;
  }

  /// Send OTP to phone number
  Future<void> sendOtp() async {
    if (!formKey.currentState!.validate()) {
      return;
    }

    try {
      isLoading.value = true;

      final requestData = {
        'phone': phoneController.text.trim(),
      };

      // Make API call to send OTP
      final response = await DioHelper.postData(
        url: 'auth/forgot-password',
        data: requestData,
      );

      if (response.statusCode == 200) {
        final responseData = response.data;

        if (responseData['success'] == true) {
          isOtpSent.value = true;
          _startResendTimer();

          _showSuccessMessage('تم إرسال رمز التحقق إلى هاتفك');
        } else {
          _showErrorMessage(responseData['message'] ?? 'فشل في إرسال رمز التحقق');
        }
      } else {
        _showErrorMessage('خطأ في الخادم، يرجى المحاولة مرة أخرى');
      }
    } catch (error) {
      _handleError(error, 'فشل في إرسال رمز التحقق');
    } finally {
      isLoading.value = false;
    }
  }

  /// Verify OTP code
  Future<void> verifyOtp() async {
    if (!otpFormKey.currentState!.validate()) {
      return;
    }

    try {
      isLoading.value = true;

      final requestData = {
        'phone': phoneController.text.trim(),
        'otp': otpController.text.trim(),
      };

      // Make API call to verify OTP
      final response = await DioHelper.postData(
        url: 'auth/verify-otp',
        data: requestData,
      );

      if (response.statusCode == 200) {
        final responseData = response.data;

        if (responseData['success'] == true) {
          isOtpVerified.value = true;
          _showSuccessMessage('تم التحقق من الرمز بنجاح');
        } else {
          _showErrorMessage(responseData['message'] ?? 'رمز التحقق غير صحيح');
        }
      } else {
        _showErrorMessage('خطأ في الخادم، يرجى المحاولة مرة أخرى');
      }
    } catch (error) {
      _handleError(error, 'فشل في التحقق من الرمز');
    } finally {
      isLoading.value = false;
    }
  }

  /// Reset password with new password
  Future<void> resetPassword() async {
    if (!resetFormKey.currentState!.validate()) {
      return;
    }

    try {
      isLoading.value = true;

      final requestData = {
        'phone': phoneController.text.trim(),
        'otp': otpController.text.trim(),
        'password': newPasswordController.text,
        'password_confirmation': confirmPasswordController.text,
      };

      // Make API call to reset password
      final response = await DioHelper.postData(
        url: 'auth/reset-password',
        data: requestData,
      );

      if (response.statusCode == 200) {
        final responseData = response.data;

        if (responseData['success'] == true) {
          _showSuccessMessage('تم تغيير كلمة المرور بنجاح');

          // Navigate back to login screen after successful reset
          await Future.delayed(const Duration(seconds: 2));
          navigateToLogin();
        } else {
          _showErrorMessage(responseData['message'] ?? 'فشل في تغيير كلمة المرور');
        }
      } else {
        _showErrorMessage('خطأ في الخادم، يرجى المحاولة مرة أخرى');
      }
    } catch (error) {
      _handleError(error, 'فشل في تغيير كلمة المرور');
    } finally {
      isLoading.value = false;
    }
  }

  /// Resend OTP code
  Future<void> resendOtp() async {
    if (!canResend.value) {
      return;
    }

    try {
      isLoading.value = true;

      final requestData = {
        'phone': phoneController.text.trim(),
      };

      // Make API call to resend OTP
      final response = await DioHelper.postData(
        url: 'auth/resend-otp',
        data: requestData,
      );

      if (response.statusCode == 200) {
        final responseData = response.data;

        if (responseData['success'] == true) {
          _startResendTimer();
          _showSuccessMessage('تم إعادة إرسال رمز التحقق');
        } else {
          _showErrorMessage(responseData['message'] ?? 'فشل في إعادة إرسال رمز التحقق');
        }
      }
    } catch (error) {
      _handleError(error, 'فشل في إعادة إرسال رمز التحقق');
    } finally {
      isLoading.value = false;
    }
  }

  /// Start countdown timer for resend OTP
  void _startResendTimer() {
    canResend.value = false;
    resendTimer.value = 60; // 60 seconds countdown

    Future.doWhile(() async {
      await Future.delayed(const Duration(seconds: 1));
      resendTimer.value--;

      if (resendTimer.value <= 0) {
        canResend.value = true;
        return false;
      }
      return true;
    });
  }

  /// Handle API errors
  void _handleError(dynamic error, String defaultMessage) {
    String errorMessage = defaultMessage;

    if (error.toString().contains('DioException')) {
      if (error.response?.statusCode == 404) {
        errorMessage = 'رقم الهاتف غير مسجل في النظام';
      } else if (error.response?.statusCode == 422) {
        final errors = error.response?.data['errors'];
        if (errors != null) {
          final firstError = errors.values.first;
          errorMessage = firstError is List ? firstError.first : firstError.toString();
        }
      } else if (error.response?.statusCode == 429) {
        errorMessage = 'تم إرسال عدد كبير من الطلبات، يرجى المحاولة لاحقاً';
      } else if (error.response?.statusCode == 500) {
        errorMessage = 'خطأ في الخادم، يرجى المحاولة لاحقاً';
      } else {
        errorMessage = 'تحقق من اتصالك بالإنترنت';
      }
    }

    _showErrorMessage(errorMessage);
  }

  /// Show success message to user
  void _showSuccessMessage(String message) {
    Get.snackbar(
      'نجح',
      message,
      snackPosition: SnackPosition.TOP,
      backgroundColor: const Color(0xFF46B971),
      colorText: Colors.white,
      duration: const Duration(seconds: 3),
    );
  }

  /// Show error message to user
  void _showErrorMessage(String message) {
    Get.snackbar(
      'خطأ',
      message,
      snackPosition: SnackPosition.TOP,
      backgroundColor: const Color(0xFF075577),
      colorText: Colors.white,
      duration: const Duration(seconds: 4),
    );
  }

  /// Navigate back to login screen
  void navigateToLogin() {
    Get.back(); // Go back to login screen
    // Or use: Get.offAllNamed('/login');
  }

  /// Reset all form data and states
  void resetAllData() {
    phoneController.clear();
    otpController.clear();
    newPasswordController.clear();
    confirmPasswordController.clear();

    isOtpSent.value = false;
    isOtpVerified.value = false;
    canResend.value = true;
    resendTimer.value = 0;

    formKey.currentState?.reset();
    otpFormKey.currentState?.reset();
    resetFormKey.currentState?.reset();
  }

  /// Fill demo data for testing
  void fillDemoData() {
    phoneController.text = '0501234567';
  }
}